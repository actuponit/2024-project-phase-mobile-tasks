// Mocks generated by Mockito 5.4.4 from annotations
// in ecommerce_app/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i28;
import 'dart:typed_data' as _i30;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ecommerce_app/core/errors/failure.dart' as _i12;
import 'package:ecommerce_app/core/http/custom_http.dart' as _i27;
import 'package:ecommerce_app/core/network/network_info.dart' as _i14;
import 'package:ecommerce_app/core/usecases/usecase.dart' as _i19;
import 'package:ecommerce_app/core/utils/input_converter.dart' as _i24;
import 'package:ecommerce_app/features/authentication/data/datasources/remote_datasource.dart'
    as _i31;
import 'package:ecommerce_app/features/authentication/data/datasources/token_handler.dart'
    as _i8;
import 'package:ecommerce_app/features/authentication/data/models/user_model.dart'
    as _i9;
import 'package:ecommerce_app/features/authentication/domain/entities/entities.dart'
    as _i26;
import 'package:ecommerce_app/features/authentication/domain/repositories/repository.dart'
    as _i10;
import 'package:ecommerce_app/features/authentication/domain/usecases/get_user_usecase.dart'
    as _i35;
import 'package:ecommerce_app/features/authentication/domain/usecases/log_in_usecase.dart'
    as _i32;
import 'package:ecommerce_app/features/authentication/domain/usecases/log_out_usecase.dart'
    as _i33;
import 'package:ecommerce_app/features/authentication/domain/usecases/sign_up_usecase.dart'
    as _i34;
import 'package:ecommerce_app/features/product/data/datasources/product_local_datasource.dart'
    as _i15;
import 'package:ecommerce_app/features/product/data/datasources/product_remote_datasource.dart'
    as _i16;
import 'package:ecommerce_app/features/product/data/models/product_model.dart'
    as _i3;
import 'package:ecommerce_app/features/product/domain/entities/product.dart'
    as _i13;
import 'package:ecommerce_app/features/product/domain/repositories/product_repository.dart'
    as _i5;
import 'package:ecommerce_app/features/product/domain/usecases/create_product.dart'
    as _i21;
import 'package:ecommerce_app/features/product/domain/usecases/delete_product.dart'
    as _i23;
import 'package:ecommerce_app/features/product/domain/usecases/get_product.dart'
    as _i18;
import 'package:ecommerce_app/features/product/domain/usecases/get_single_product.dart'
    as _i20;
import 'package:ecommerce_app/features/product/domain/usecases/update_product.dart'
    as _i22;
import 'package:http/http.dart' as _i7;
import 'package:image_picker/image_picker.dart' as _i25;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i6;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i29;
import 'package:shared_preferences/shared_preferences.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductModel_1 extends _i1.SmartFake implements _i3.ProductModel {
  _FakeProductModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddressCheckResult_3 extends _i1.SmartFake
    implements _i4.AddressCheckResult {
  _FakeAddressCheckResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_4 extends _i1.SmartFake
    implements _i5.ProductRepository {
  _FakeProductRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_5 extends _i1.SmartFake
    implements _i6.LostDataResponse {
  _FakeLostDataResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_6 extends _i1.SmartFake implements _i7.Client {
  _FakeClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenHandler_7 extends _i1.SmartFake implements _i8.TokenHandler {
  _FakeTokenHandler_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_8 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_9 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_10 extends _i1.SmartFake implements _i9.UserModel {
  _FakeUserModel_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationRepository_11 extends _i1.SmartFake
    implements _i10.AuthenticationRepository {
  _FakeAuthenticationRepository_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i5.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>> getProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>>.value(
                _FakeEither_0<_i12.Failure, List<_i13.Product>>(
          this,
          Invocation.method(
            #getProducts,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> getSingleProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [id],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #getSingleProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> updateProduct(
          _i13.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> deleteProduct(
          String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> addProduct(
          _i13.Product? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i14.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);
}

/// A class which mocks [ProductLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDatasource extends _i1.Mock
    implements _i15.ProductLocalDatasource {
  MockProductLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<_i3.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i11.Future<List<_i3.ProductModel>>);

  @override
  _i11.Future<_i3.ProductModel> getSingleProduct() => (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getSingleProduct,
            [],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<void> cacheSingleProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheSingleProduct,
          [product],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> cacheProducts(List<_i3.ProductModel>? products) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheProducts,
          [products],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [ProductRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDatasource extends _i1.Mock
    implements _i16.ProductRemoteDatasource {
  MockProductRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<List<_i3.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i11.Future<List<_i3.ProductModel>>.value(<_i3.ProductModel>[]),
      ) as _i11.Future<List<_i3.ProductModel>>);

  @override
  _i11.Future<_i3.ProductModel> getSingleProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [id],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #getSingleProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<_i3.ProductModel> updateProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProduct,
          [product],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #updateProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<_i3.ProductModel> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);

  @override
  _i11.Future<_i3.ProductModel> addProduct(_i3.ProductModel? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [product],
        ),
        returnValue: _i11.Future<_i3.ProductModel>.value(_FakeProductModel_1(
          this,
          Invocation.method(
            #addProduct,
            [product],
          ),
        )),
      ) as _i11.Future<_i3.ProductModel>);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i4.InternetConnectionChecker {
  MockInternetConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get checkInterval => (super.noSuchMethod(
        Invocation.getter(#checkInterval),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkInterval),
        ),
      ) as Duration);

  @override
  Duration get checkTimeout => (super.noSuchMethod(
        Invocation.getter(#checkTimeout),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#checkTimeout),
        ),
      ) as Duration);

  @override
  List<_i4.AddressCheckOptions> get addresses => (super.noSuchMethod(
        Invocation.getter(#addresses),
        returnValue: <_i4.AddressCheckOptions>[],
      ) as List<_i4.AddressCheckOptions>);

  @override
  set addresses(List<_i4.AddressCheckOptions>? value) => super.noSuchMethod(
        Invocation.setter(
          #addresses,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<bool> get hasConnection => (super.noSuchMethod(
        Invocation.getter(#hasConnection),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<_i4.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i11.Future<_i4.InternetConnectionStatus>.value(
            _i4.InternetConnectionStatus.connected),
      ) as _i11.Future<_i4.InternetConnectionStatus>);

  @override
  _i11.Stream<_i4.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
        Invocation.getter(#onStatusChange),
        returnValue: _i11.Stream<_i4.InternetConnectionStatus>.empty(),
      ) as _i11.Stream<_i4.InternetConnectionStatus>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get isActivelyChecking => (super.noSuchMethod(
        Invocation.getter(#isActivelyChecking),
        returnValue: false,
      ) as bool);

  @override
  _i11.Future<_i4.AddressCheckResult> isHostReachable(
          _i4.AddressCheckOptions? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #isHostReachable,
          [options],
        ),
        returnValue:
            _i11.Future<_i4.AddressCheckResult>.value(_FakeAddressCheckResult_3(
          this,
          Invocation.method(
            #isHostReachable,
            [options],
          ),
        )),
      ) as _i11.Future<_i4.AddressCheckResult>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i17.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i11.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i11.Future<bool>.value(false),
      ) as _i11.Future<bool>);

  @override
  _i11.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [GetProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductUsecase extends _i1.Mock implements _i18.GetProductUsecase {
  MockGetProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>> call(
          _i19.NoParams? noParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noParam],
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>>.value(
                _FakeEither_0<_i12.Failure, List<_i13.Product>>(
          this,
          Invocation.method(
            #call,
            [noParam],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, List<_i13.Product>>>);
}

/// A class which mocks [GetSingleProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSingleProductUsecase extends _i1.Mock
    implements _i20.GetSingleProductUsecase {
  MockGetSingleProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> call(
          _i20.GetSingleProductParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);
}

/// A class which mocks [CreateProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProductUseCase extends _i1.Mock
    implements _i21.CreateProductUseCase {
  MockCreateProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> call(
          _i21.CreateProductParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i22.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> call(
          _i22.UpdateProductParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);
}

/// A class which mocks [DeleteProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductUsecase extends _i1.Mock
    implements _i23.DeleteProductUsecase {
  MockDeleteProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.ProductRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Product>> call(
          _i23.DeleteProductParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>.value(
            _FakeEither_0<_i12.Failure, _i13.Product>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Product>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i24.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i12.Failure, double> stringToUnsignedDouble(String? str) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringToUnsignedDouble,
          [str],
        ),
        returnValue: _FakeEither_0<_i12.Failure, double>(
          this,
          Invocation.method(
            #stringToUnsignedDouble,
            [str],
          ),
        ),
      ) as _i2.Either<_i12.Failure, double>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i25.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i6.XFile?> pickImage({
    required _i6.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i6.CameraDevice? preferredCameraDevice = _i6.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i11.Future<_i6.XFile?>.value(),
      ) as _i11.Future<_i6.XFile?>);

  @override
  _i11.Future<List<_i6.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i11.Future<List<_i6.XFile>>.value(<_i6.XFile>[]),
      ) as _i11.Future<List<_i6.XFile>>);

  @override
  _i11.Future<_i6.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i11.Future<_i6.XFile?>.value(),
      ) as _i11.Future<_i6.XFile?>);

  @override
  _i11.Future<List<_i6.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    int? limit,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #limit: limit,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i11.Future<List<_i6.XFile>>.value(<_i6.XFile>[]),
      ) as _i11.Future<List<_i6.XFile>>);

  @override
  _i11.Future<_i6.XFile?> pickVideo({
    required _i6.ImageSource? source,
    _i6.CameraDevice? preferredCameraDevice = _i6.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i11.Future<_i6.XFile?>.value(),
      ) as _i11.Future<_i6.XFile?>);

  @override
  _i11.Future<_i6.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i11.Future<_i6.LostDataResponse>.value(_FakeLostDataResponse_5(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i11.Future<_i6.LostDataResponse>);

  @override
  bool supportsImageSource(_i6.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i10.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> logIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #logIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.User>> signUp({
    required String? email,
    required String? password,
    required String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
            #name: name,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i26.User>>.value(
            _FakeEither_0<_i12.Failure, _i26.User>(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
              #name: name,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.User>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.User>> getUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i26.User>>.value(
            _FakeEither_0<_i12.Failure, _i26.User>(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.User>>);
}

/// A class which mocks [CustomHttp].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomHttp extends _i1.Mock implements _i27.CustomHttp {
  MockCustomHttp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_6(
          this,
          Invocation.getter(#client),
        ),
      ) as _i7.Client);

  @override
  _i8.TokenHandler get tokenHandler => (super.noSuchMethod(
        Invocation.getter(#tokenHandler),
        returnValue: _FakeTokenHandler_7(
          this,
          Invocation.getter(#tokenHandler),
        ),
      ) as _i8.TokenHandler);

  @override
  _i11.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i7.StreamedResponse>);

  @override
  _i11.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i29.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i30.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i30.Uint8List>.value(_i30.Uint8List(0)),
      ) as _i11.Future<_i30.Uint8List>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TokenHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenHandler extends _i1.Mock implements _i8.TokenHandler {
  MockTokenHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> saveToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #saveToken,
          [token],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);

  @override
  _i11.Future<void> removeToken() => (super.noSuchMethod(
        Invocation.method(
          #removeToken,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i31.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<String> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i11.Future<String>.value(_i29.dummyValue<String>(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i9.UserModel> register(
    String? email,
    String? password,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            name,
          ],
        ),
        returnValue: _i11.Future<_i9.UserModel>.value(_FakeUserModel_10(
          this,
          Invocation.method(
            #register,
            [
              email,
              password,
              name,
            ],
          ),
        )),
      ) as _i11.Future<_i9.UserModel>);

  @override
  _i11.Future<_i9.UserModel> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i11.Future<_i9.UserModel>.value(_FakeUserModel_10(
          this,
          Invocation.method(
            #getUser,
            [],
          ),
        )),
      ) as _i11.Future<_i9.UserModel>);
}

/// A class which mocks [LogInUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInUsecase extends _i1.Mock implements _i32.LogInUsecase {
  MockLogInUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> call(_i32.LogInParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [LogOutUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutUsecase extends _i1.Mock implements _i33.LogOutUsecase {
  MockLogOutUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, void>> call(_i19.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, void>>.value(
            _FakeEither_0<_i12.Failure, void>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, void>>);
}

/// A class which mocks [SignUpUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUsecase extends _i1.Mock implements _i34.SignUpUsecase {
  MockSignUpUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.User>> call(
          _i34.SignUpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i26.User>>.value(
            _FakeEither_0<_i12.Failure, _i26.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.User>>);
}

/// A class which mocks [GetUserUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserUsecase extends _i1.Mock implements _i35.GetUserUsecase {
  MockGetUserUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.AuthenticationRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAuthenticationRepository_11(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i10.AuthenticationRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i26.User>> call(
          _i19.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i26.User>>.value(
            _FakeEither_0<_i12.Failure, _i26.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i26.User>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i7.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i28.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i11.Future<_i7.Response>.value(_FakeResponse_9(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i11.Future<_i7.Response>);

  @override
  _i11.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<String>.value(_i29.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i11.Future<String>);

  @override
  _i11.Future<_i30.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i11.Future<_i30.Uint8List>.value(_i30.Uint8List(0)),
      ) as _i11.Future<_i30.Uint8List>);

  @override
  _i11.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i11.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_8(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i11.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
